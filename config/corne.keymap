/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define BASE 0
#define NUMS 1
#define RAISE 2
#define NAV 3

// TAP_DANCE settings
#define TAP_DANCE_MS 200
#define HOLD_TAP_MS 200
// This makes combos explicit, helps prevent rolling when typing normally
#define COMBO_TIMEOUT_MS 20
#define PRIOR_IDLE_MS 80

// MACROS to make the the code easier to read
// include name or reference in keymap
// Format:
//      name        reference             keys, key2
//
// Tap Dances
#define TD_SHLOCK   &shl               // RSHIFT CAPSLOCK

&led_strip {
    chain-length = <27>;
};

/ {
  behaviors{
    shl: tap_dance_shift_lock {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAP_DANCE_MS>;
      bindings = <&kp RSHIFT>, <&kp CAPSLOCK>;
    };

    hlkr: hold_layer_key_repeat {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <HOLD_TAP_MS>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
      bindings = <&mo>, <&key_repeat>;
    };

    gresc: grave_escape {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp GRAVE>, <&kp ESC>;
      mods = <(MOD_RGUI|MOD_RSFT)>;
    };
  };

  macros {
    enter_esc: enter_esc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      // 30ms+ to avoid having HID notifications grouped at the BLE protocol level and being processed out of order.
      wait-ms = <40>;
      tap-ms = <40>;
      bindings = <&kp ENTER &kp ESC>;
    };
  };

  combos {
    compatible = "zmk,combos";

    // This is annoying for gaming so lets not use them lol
    // rs_enter {
    //   timeout-ms = <COMBO_TIMEOUT_MS>;
    //   key-positions = <14 15>; // R S
    //   bindings = <&kp ENTER>;
    //   require-prior-idle-ms = <PRIOR_IDLE_MS>;
    // };

    // st_esc {
    //   timeout-ms = <COMBO_TIMEOUT_MS>;
    //   key-positions = <15 16>; // S T
    //   bindings = <&kp ESC>;
    //   require-prior-idle-ms = <PRIOR_IDLE_MS>;
    // };

    fp_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <3 4>; // F P
      bindings = <&kp LG(P)>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    ei_enter {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <20 21>; // E I
      bindings = <&kp ENTER>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    ne_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <19 20>; // N E
      bindings = <&kp ESC>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    nei_enter_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <19 20 21>; // N E I
      bindings = <&enter_esc>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    combo_menu {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <32 33>; // COMMA DOT
      bindings = <&kp K_CMENU>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };


    cd_paste {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <27 28>;
      bindings = <&kp LS(LC(V))>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

// 0 - Base layer
    // -----------------------------------------------------------------------------                        ---------------------------------------------------------------------------------------
   //  |   TAB    |     Q    |       W       |     E     |      R      |     T     |                        |     Y    |       U       |      I      |       O        |       P       |    BSPC   |
   //  |   CTRL   |     A    |       S       |     D     |      F      |     G     |                        |     H    |       J       |      K      |       L        |       ;       |     '     |
   //  |   SHFT   |     Z    |       X       |     C     |      V      |     B     |                        |     N    |       M       |      ,      |       .        |       /       |    ESC    |
   //                        |      GUI      |    LWR    |     SPC     |                                    |    ENT   |      RSE      |     ALT     |
    base_layer {
      bindings = <
        &kp TAB      &kp Q        &kp W           &kp E        &kp R        &kp T                               &kp Y         &kp U         &kp I           &kp O           &kp P         &kp BSPC
        &kp LCTRL    &kp A        &kp S           &kp D        &kp F        &kp G                               &kp H         &kp J         &kp K           &kp L           &kp SEMI      &kp SQT
        &kp LSHFT    &kp Z        &kp X           &kp C        &kp V        &kp B                               &kp N         &kp M         &kp COMMA       &kp DOT         &kp FSLH      &kp ESC
                                  &kp LGUI        &mo 1        &kp SPACE                                       &kp RET        &mo 2         &kp RALT
      >;
    };

   //  1 - Numbers, symbols, F-keys
   //  --------------------------------------   ---------------------------------------------------
   //  |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
   //  | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
   //  | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
   //                     | GUI |     | SPC |   | ENT |     | ALT |
                        
    nums_layer {
      bindings = <
       &kp TAB      &kp N1         &kp N2         &kp N3       &kp N4                                           &kp N5        &kp N6        &kp N7        &kp N8 &kp N9      &kp N0       &kp BSPC
       &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3                                     &bt BT_SEL 4  &kp LEFT      &kp DOWN      &kp UP &kp RIGHT   &trans       &trans
       &kp LSHFT    &trans         &trans         &trans       &trans                                           &trans        &trans        &trans        &trans &trans      &trans       &trans
                                   &kp LGUI       &trans       &kp SPACE                                        &kp RET       &trans        &kp RALT
                        >;
                };

    // 3 - Navgation, Window Mgmt, Media
        
    nav_layer {
      bindings = <
        &trans  &kp LT    &kp LBRC   &kp RBRC  &kp PSCRN  &kp PIPE                                         &kp HOME    &kp PG_DN     &kp PG_UP     &kp END     &kp MINUS  &kp EQUAL
        &trans  &kp PLUS  &kp LBKT   &kp RBKT  &kp EQUAL  &kp GT                                           &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT   &kp LBKT   &kp RBKT
        &trans  &trans    &kp MINUS  &kp BSPC  &kp DEL    &kp UNDER                                        &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &kp BSLH   &kp C_PP
                                     &kp LGUI  &trans     &kp trans                                        &trans      &trans        &trans
      >;
    };

    // 2 - Symbols
   //       --------------------------------------                    ------------------------------------------------
   //       |  TAB |  !  |  @  |  #  |  $  |  %  |                    |  ^  |  &  |  *  |  (  |  )  | BSPC |
   //       | CTRL |     |     |     |     |     |                    |  -  |  =  |  [  |  ]  |  \  |  `   |
   //       | SHFT |     |     |     |     |     |                    |  _  |  +  |  {  |  }  | "|" |  ~   |
   //                          | GUI |     | SPC |                    | ENT |     | ALT |
    raise_layer {
      bindings = <
           &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
           &kp LCTRL &trans   &trans &trans   &trans   &trans         &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
           &kp LSHFT &trans   &trans &trans   &trans   &trans         &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                                     &kp LGUI &trans   &kp SPACE      &kp RET   &trans    &kp RALT
                        >;
                };
        };
};


